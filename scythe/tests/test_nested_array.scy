int deref = 0;

struct Row
{
	any padding1;
	any padding2;
	any padding3;
	any padding4;
	any padding5;
	int[] array;
}

struct Matrix
{
	any padding1;
	any padding2;
	any padding3;
	Row[] rows;
}

any* currentOffset = 0;

Matrix[] AllocateMatrixArray(int length)
{
	Matrix[] array;
	array.ptr = currentOffset;
	array.length = length;
	currentOffset += length * sizeof(array[0]);
	return array;
}

Row[] AllocateRowArray(int length)
{
	Row[] array;
	array.ptr = currentOffset;
	array.length = length;
	currentOffset += length * sizeof(array[0]);
	return array;
}

int[] AllocateIntArray(int length)
{
	int[] array;
	array.ptr = currentOffset;
	array.length = length;
	currentOffset += length;
	return array;
}

void Multiply(Matrix a, Matrix b, Matrix* c)
{
	int n = a.rows.length;               // number of rows in a
	int m = a.rows[0].array.length;      // number of columns in a (and rows in b)
	int p = b.rows[0].array.length;      // number of columns in b

	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < p; ++j)
		{
			int sum = 0;

			// Compute dot product of row i of a and column j of b
			for (int k = 0; k < m; ++k)
				sum += a.rows[i].array[k] * b.rows[k].array[j];

			c[deref].rows[i].array[j] = sum;
		}
	}
}

@init
{
	Matrix[] matrices = AllocateMatrixArray(3);

	void InitializeMatrix(Matrix* matrix, int rows, int cols)
	{
		int number = 1;
		void InitializeRow(Row* row, int cols)
		{
			row[deref].array = AllocateIntArray(cols);

			for (int i = 0; i < cols; void { ++i; ++number; })
				row[deref].array[i] = number;
		}

		matrix[deref].rows = AllocateRowArray(rows);

		for (int i = 0; i < rows; ++i)
			InitializeRow(matrix[deref].rows.ptr + i, cols);
	}

	InitializeMatrix(matrices.ptr + 0, 7, 6);
	InitializeMatrix(matrices.ptr + 1, 6, 7);
	InitializeMatrix(matrices.ptr + 2, 7, 7);

	Multiply(matrices[0], matrices[1], matrices.ptr + 2);

	bool AAA_test_nested_array =
		matrices[0].rows[0].array[0] == 1 &&
		matrices[0].rows[0].array[1] == 2 &&
		matrices[0].rows[0].array[2] == 3 &&
		matrices[0].rows[0].array[3] == 4 &&
		matrices[0].rows[0].array[4] == 5 &&
		matrices[0].rows[0].array[5] == 6 &&

		matrices[0].rows[1].array[0] == 7 &&
		matrices[0].rows[1].array[1] == 8 &&
		matrices[0].rows[1].array[2] == 9 &&
		matrices[0].rows[1].array[3] == 10 &&
		matrices[0].rows[1].array[4] == 11 &&
		matrices[0].rows[1].array[5] == 12 &&

		matrices[0].rows[2].array[0] == 13 &&
		matrices[0].rows[2].array[1] == 14 &&
		matrices[0].rows[2].array[2] == 15 &&
		matrices[0].rows[2].array[3] == 16 &&
		matrices[0].rows[2].array[4] == 17 &&
		matrices[0].rows[2].array[5] == 18 &&

		matrices[0].rows[3].array[0] == 19 &&
		matrices[0].rows[3].array[1] == 20 &&
		matrices[0].rows[3].array[2] == 21 &&
		matrices[0].rows[3].array[3] == 22 &&
		matrices[0].rows[3].array[4] == 23 &&
		matrices[0].rows[3].array[5] == 24 &&

		matrices[0].rows[4].array[0] == 25 &&
		matrices[0].rows[4].array[1] == 26 &&
		matrices[0].rows[4].array[2] == 27 &&
		matrices[0].rows[4].array[3] == 28 &&
		matrices[0].rows[4].array[4] == 29 &&
		matrices[0].rows[4].array[5] == 30 &&

		matrices[0].rows[5].array[0] == 31 &&
		matrices[0].rows[5].array[1] == 32 &&
		matrices[0].rows[5].array[2] == 33 &&
		matrices[0].rows[5].array[3] == 34 &&
		matrices[0].rows[5].array[4] == 35 &&
		matrices[0].rows[5].array[5] == 36 &&

		matrices[0].rows[6].array[0] == 37 &&
		matrices[0].rows[6].array[1] == 38 &&
		matrices[0].rows[6].array[2] == 39 &&
		matrices[0].rows[6].array[3] == 40 &&
		matrices[0].rows[6].array[4] == 41 &&
		matrices[0].rows[6].array[5] == 42 &&


		matrices[1].rows[0].array[0] == 1 &&
		matrices[1].rows[0].array[1] == 2 &&
		matrices[1].rows[0].array[2] == 3 &&
		matrices[1].rows[0].array[3] == 4 &&
		matrices[1].rows[0].array[4] == 5 &&
		matrices[1].rows[0].array[5] == 6 &&
		matrices[1].rows[0].array[6] == 7 &&

		matrices[1].rows[1].array[0] == 8 &&
		matrices[1].rows[1].array[1] == 9 &&
		matrices[1].rows[1].array[2] == 10 &&
		matrices[1].rows[1].array[3] == 11 &&
		matrices[1].rows[1].array[4] == 12 &&
		matrices[1].rows[1].array[5] == 13 &&
		matrices[1].rows[1].array[6] == 14 &&

		matrices[1].rows[2].array[0] == 15 &&
		matrices[1].rows[2].array[1] == 16 &&
		matrices[1].rows[2].array[2] == 17 &&
		matrices[1].rows[2].array[3] == 18 &&
		matrices[1].rows[2].array[4] == 19 &&
		matrices[1].rows[2].array[5] == 20 &&
		matrices[1].rows[2].array[6] == 21 &&

		matrices[1].rows[3].array[0] == 22 &&
		matrices[1].rows[3].array[1] == 23 &&
		matrices[1].rows[3].array[2] == 24 &&
		matrices[1].rows[3].array[3] == 25 &&
		matrices[1].rows[3].array[4] == 26 &&
		matrices[1].rows[3].array[5] == 27 &&
		matrices[1].rows[3].array[6] == 28 &&

		matrices[1].rows[4].array[0] == 29 &&
		matrices[1].rows[4].array[1] == 30 &&
		matrices[1].rows[4].array[2] == 31 &&
		matrices[1].rows[4].array[3] == 32 &&
		matrices[1].rows[4].array[4] == 33 &&
		matrices[1].rows[4].array[5] == 34 &&
		matrices[1].rows[4].array[6] == 35 &&

		matrices[1].rows[5].array[0] == 36 &&
		matrices[1].rows[5].array[1] == 37 &&
		matrices[1].rows[5].array[2] == 38 &&
		matrices[1].rows[5].array[3] == 39 &&
		matrices[1].rows[5].array[4] == 40 &&
		matrices[1].rows[5].array[5] == 41 &&
		matrices[1].rows[5].array[6] == 42 &&


		matrices[2].rows[0].array[0] == 511 &&
		matrices[2].rows[0].array[1] == 532 &&
		matrices[2].rows[0].array[2] == 553 &&
		matrices[2].rows[0].array[3] == 574 &&
		matrices[2].rows[0].array[4] == 595 &&
		matrices[2].rows[0].array[5] == 616 &&
		matrices[2].rows[0].array[6] == 637 &&

		matrices[2].rows[1].array[0] == 1177 &&
		matrices[2].rows[1].array[1] == 1234 &&
		matrices[2].rows[1].array[2] == 1291 &&
		matrices[2].rows[1].array[3] == 1348 &&
		matrices[2].rows[1].array[4] == 1405 &&
		matrices[2].rows[1].array[5] == 1462 &&
		matrices[2].rows[1].array[6] == 1519 &&

		matrices[2].rows[2].array[0] == 1843 &&
		matrices[2].rows[2].array[1] == 1936 &&
		matrices[2].rows[2].array[2] == 2029 &&
		matrices[2].rows[2].array[3] == 2122 &&
		matrices[2].rows[2].array[4] == 2215 &&
		matrices[2].rows[2].array[5] == 2308 &&
		matrices[2].rows[2].array[6] == 2401 &&

		matrices[2].rows[3].array[0] == 2509 &&
		matrices[2].rows[3].array[1] == 2638 &&
		matrices[2].rows[3].array[2] == 2767 &&
		matrices[2].rows[3].array[3] == 2896 &&
		matrices[2].rows[3].array[4] == 3025 &&
		matrices[2].rows[3].array[5] == 3154 &&
		matrices[2].rows[3].array[6] == 3283 &&

		matrices[2].rows[4].array[0] == 3175 &&
		matrices[2].rows[4].array[1] == 3340 &&
		matrices[2].rows[4].array[2] == 3505 &&
		matrices[2].rows[4].array[3] == 3670 &&
		matrices[2].rows[4].array[4] == 3835 &&
		matrices[2].rows[4].array[5] == 4000 &&
		matrices[2].rows[4].array[6] == 4165 &&

		matrices[2].rows[5].array[0] == 3841 &&
		matrices[2].rows[5].array[1] == 4042 &&
		matrices[2].rows[5].array[2] == 4243 &&
		matrices[2].rows[5].array[3] == 4444 &&
		matrices[2].rows[5].array[4] == 4645 &&
		matrices[2].rows[5].array[5] == 4846 &&
		matrices[2].rows[5].array[6] == 5047 &&

		matrices[2].rows[6].array[0] == 4507 &&
		matrices[2].rows[6].array[1] == 4744 &&
		matrices[2].rows[6].array[2] == 4981 &&
		matrices[2].rows[6].array[3] == 5218 &&
		matrices[2].rows[6].array[4] == 5455 &&
		matrices[2].rows[6].array[5] == 5692 &&
		matrices[2].rows[6].array[6] == 5929;
}
