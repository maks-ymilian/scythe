import "builtin/jsfx.scy"

public input playSpeed [
	default_value: 0,
	min: -2,
	max: 2,
];

public input samples [
	default_value: 1000,
	min: 1,
	max: 48000,
	increment: 1, shape: [
		type: log,
		midpoint: 1000,
	],
];

@gfx
{
	gfx.set(0.3, 0.5, 0.6);

	int spacing = 10;
	int count = 5;
	int size = math.max(gfx.mouse_x, gfx.mouse_y) / count;
    for (int x = 0; x < size * count; x += size)
		for (int y = 0; y < size * count; y += size)
			gfx.rect(x + spacing / 2, y + spacing / 2, size - spacing / 2, size - spacing / 2);

	gfx.set_position(10, 10);
	float result;
	gfx.get_pixel(result, 0, 0);
}

struct Sample
{
	float l;
	float r;
}

Sample[] buffer;
float write;
float play;

@slider
{
	buffer = Sample[] {
		.ptr = 0,
		.length = samples.value,
	};
	write = 0;
	play = 0;

	mem.set(0, 0, buffer.length * sizeof(Sample));
}

@sample
{
	// keep pointers in range
	while (play >= buffer.length) play -= buffer.length;
	while (write >= buffer.length) write -= buffer.length;
	while (play < buffer.ptr) play += buffer.length;
	while (write < buffer.ptr) write += buffer.length;

	// write
	buffer[write] = Sample {
		Sample s;
		s.l = jsfx.spl0;
		s.r = jsfx.spl1;
		return s;
	};
	++write;

	// play
	jsfx.spl0 = buffer[play].l;
	jsfx.spl1 = buffer[play].r;
	play += playSpeed.value;
}
