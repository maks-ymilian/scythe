// Copyright 2006, Thomas Scott Stillwell
// All rights reserved.
//
//Redistribution and use in source and binary forms, with or without modification, are permitted 
//provided that the following conditions are met:
//
//Redistributions of source code must retain the above copyright notice, this list of conditions 
//and the following disclaimer. 
//
//Redistributions in binary form must reproduce the above copyright notice, this list of conditions 
//and the following disclaimer in the documentation and/or other materials provided with the distribution. 
//
//The name of Thomas Scott Stillwell may not be used to endorse or 
//promote products derived from this software without specific prior written permission. 
//
//THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR 
//IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND 
//FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS 
//BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES 
//(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR 
//PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, 
//STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF 
//THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

import "builtin/jsfx.scy"

input thresh      { default_value: 0,   min: -60, max: 0,    increment: 0.1, description: "Threshold (dB)", };
input ratio_enum  { default_value: 5,   min: 0,   max: 9,    increment: 1,   description: "Ratio", };
input makeup      { default_value: 0,   min: -20, max: 20,   increment: 0.1, description: "Gain (dB)", };
input attack      { default_value: 20,  min: 20,  max: 2000, increment: 10,  description: "Attack (uS)", };
input release     { default_value: 250, min: 20,  max: 1000, increment: 1,   description: "Release (mS)", };
input mix_percent { default_value: 100, min: 0,   max: 100,  increment: 0.1, description: "Mix (%)", };

float LOG_TO_DB = 8.6858896380650365530225783783321; // 20 / ln(10)
float DB_TO_LOG = 0.11512925464970228420089957273422; // ln(10) / 20 
float RATATCOEF = math.exp(-1 / (0.00001 * jsfx.sample_rate));
float RATRELCOEF = math.exp(-1 / (0.5 * jsfx.sample_rate));
float GR_METER_DECAY = math.exp(1 / (1 * jsfx.sample_rate));

float attime = 0.010;
float reltime = 0.100;
float ratio = 0;
float cratio = 0;
float rundb = 0;
float overdb = 0;
float atcoef = math.exp(-1 / (attime * jsfx.sample_rate));
float relcoef = math.exp(-1 / (reltime * jsfx.sample_rate));
float mix = 1;
float gr_meter = 1;

@init
{
	jsfx.ext_tail_size = -1;
	jsfx.ext_gain_reduction_meter = 0;
}

float capsc;
float allin;
float cthreshv;
float makeupv;
@slider
{
	capsc = LOG_TO_DB;
	int ratio_enum = ratio_enum.value;
	if (ratio_enum > 4)
		ratio_enum -= 5;
	else
		capsc *= 2.08136898; // broken capacitor

	if (ratio_enum == 0) ratio = 4;
	else if (ratio_enum == 1) ratio = 8;
	else if (ratio_enum == 2) ratio = 12;
	else ratio = 20;

	if (ratio_enum == 4)
	{
		allin = 1;
		cratio = 20;
	}
	else
	{
		allin = 0;
		cratio = ratio;
	}

	cthreshv = math.exp(thresh.value * DB_TO_LOG);
	makeupv = math.exp((makeup.value) * DB_TO_LOG);
	attime = attack.value / 1000000;
	reltime = release.value / 1000;
	atcoef=math.exp(-1 / (attime * jsfx.sample_rate));
	relcoef=math.exp(-1 / (reltime * jsfx.sample_rate));
	mix=mix_percent.value /100;
}

float averatio;
float runratio;
float runmax;
float maxover;
@sample
{
	float ospl0 = jsfx.spl0;
	float ospl1 = jsfx.spl1;
	float maxspl = math.max(math.abs(jsfx.spl0), math.abs(jsfx.spl1));
	maxspl = maxspl * maxspl;
	float det = math.sqrt(math.max(0, maxspl));
	overdb = math.max(0, capsc * math.log(det / cthreshv));

	if (overdb - rundb > 5)
		averatio = 4;

	if (overdb > rundb)
	{
		rundb = overdb + atcoef * (rundb - overdb);
		runratio = averatio + RATATCOEF * (runratio - averatio);
	}
	else
	{
		rundb = overdb + relcoef * (rundb - overdb);
		runratio = averatio + RATRELCOEF * (runratio - averatio);
	}
	overdb = rundb;
	averatio = runratio;

	if (allin)
		cratio = 12 + averatio;
	else
		cratio = ratio;

	float gr = -overdb * (cratio - 1) / cratio;
	jsfx.ext_gain_reduction_meter = gr;
	float grv = math.exp(gr * DB_TO_LOG);

	runmax = maxover + relcoef * (runmax - maxover);  // highest peak for setting att/rel decays in reltime
	maxover = runmax;

	if (grv < gr_meter)
		gr_meter = grv;
	else
	{
		gr_meter *= GR_METER_DECAY;
		if (gr_meter > 1)
			gr_meter = 1;
	}

	jsfx.spl0 *= grv * makeupv * mix;
	jsfx.spl1 *= grv * makeupv * mix;  

	jsfx.spl0 += ospl0 * (1 - mix);
	jsfx.spl1 += ospl1 * (1 - mix);
}

@gfx
// 0 32 // request horizontal/vertical heights (0 means dont care)
{
	gr_meter *= math.exp(1 / 30);
	if (gr_meter > 1)
		gr_meter = 1; // decay meter here so if the audio processing stops it doesnt "stick"

	gfx.r = 1;
	gfx.g = 0;
	gfx.b = 0;
	gfx.a = 0.8;

	float meter_bot = 20;
	float meter_h = math.min(gfx.h, 32);
	float xscale = gfx.w * 20 / meter_bot;

	gfx.y = 0;
	gfx.x = gfx.w + math.log10(gr_meter) * xscale;
	gfx.rect_to(gfx.w, meter_h);

	gfx.r = 1;
	gfx.g = 1;
	gfx.b = 1;
	gfx.a = 0.6;

	float s2 = math.sqrt(2) / 2;
	float g = s2;
	while (gfx.x >= 0)
	{
		gfx.x = gfx.w + math.log10(g) * xscale;
		if (gfx.x >= 0)
		{
			gfx.y = 0;
			gfx.line_to(gfx.x, meter_h, 0);
			gfx.y = meter_h - gfx.text_height;
			gfx.x += 2;
			gfx.draw_number(math.log10(g) * 20, 0);
			gfx.draw_char('d');
			gfx.draw_char('B');
		}
		g *= s2;
	}
	gfx.a=1;

	gfx.x = 0;
	gfx.y = meter_h / 2 - gfx.text_height / 2;
	gfx.draw_number(math.log10(gr_meter) * 20, 1);
	gfx.draw_char('d');
	gfx.draw_char('B');
}
