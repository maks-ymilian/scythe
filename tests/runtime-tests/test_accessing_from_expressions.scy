struct Level3
{
	int w;
}

struct Level2
{
	string z;
	Level3 deep;
}

struct Level1
{
	string x;
	int y;
	Level2 deep;
}

bool test()
{
	Level1 t1;
	Level1 t2 = Level1{.deep.deep.w = 78};

	if ((t1 = t2).deep.deep.w != 78 ||
		t1.deep.deep.w != 78 ||
		t2.deep.deep.w != 78)
		return false;

	Level1[] arr1 = Level1[]{.ptr = 100};
	Level1[] arr2 = Level1[]{.ptr = 150};
	(*(arr1.ptr)) = Level1{.deep.deep.w = 29};
	(*(arr2.ptr)) = Level1{.deep.deep.w = 31};

	if ((*(arr2.ptr)).deep.deep.w != 31 ||
		(*(arr1.ptr)).deep.deep.w != 29 ||
		((*(arr1.ptr)).deep = (*(arr2.ptr)).deep).deep.w != 31 ||
		(*(arr1.ptr)).deep.deep.w != 31)
		return false;

	if (Level1{.y = 5}.y + Level2{.deep.w = 89}.deep.w != 5 + 89 ||
		(Level1[]{.ptr = 1000}[0].deep.deep.w = 51) != 51 ||
		int[]{.ptr = 1000}[3] != 51)
		return false;

	Level1[] arr3 = Level1[]{.ptr = 20, .length = 48};
	Level1[] arr4 = Level1[]{.ptr = 30, .length = 27};
	arr3[0] = Level1{.deep.deep.w = 209};
	arr4[0] = Level1{.deep.deep.w = 938};

	if (arr3[0].deep.deep.w != 209 ||
		arr4[0].deep.deep.w != 938 ||
		(arr3 = arr4)[0].deep.deep.w != 938 ||
		arr3[0].deep.deep.w != 938 ||
		arr4[0].deep.deep.w != 938)
		return false;

	if (arr3.ptr != 30 ||
		arr3.length != 27)
		return false;

	return true;
}

struct V
{
	float x;
}

struct A
{
	V v3;
	V v1;
	V v2;
}

bool otherTest()
{
	A[] b1;
	A b = A {.v1.x = 1};
	b1[0] = A {.v1.x = 1};
	return b.v1.x == b1[0].v1.x;
}

struct Vec3
{
	float x;
	float y;
	float z;
}

struct Pos
{
	Vec3 pos;
}

struct Vertex
{
	Pos p;
	Pos n;
	Vec3 v;
}

bool otherOtherTest()
{
	Vertex[] vertices;
	vertices[100].v = Vec3 {.x = 1, .y = 2, .z = 3};
	vertices[100].p.pos = Vec3 {.x = 4, .y = 5, .z = 6};
	vertices[100].n.pos = Vec3 {.x = 7, .y = 8, .z = 9};
	return
		vertices[100].v.x == 1 &&
		vertices[100].v.y == 2 &&
		vertices[100].v.z == 3 &&
		vertices[100].p.pos.x == 4 &&
		vertices[100].p.pos.y == 5 &&
		vertices[100].p.pos.z == 6 &&
		vertices[100].n.pos.x == 7 &&
		vertices[100].n.pos.y == 8 &&
		vertices[100].n.pos.z == 9;
}

struct Vec4
{
	float x;
	float y;
	float z;
	float w;
}

struct Vertex4D
{
	Vec4 pos;
	Vec3 normal;
}

struct Triangle4D
{
	Vertex4D v1;
	Vertex4D v2;
	Vertex4D v3;
}

Triangle4D TransformTriangle(Triangle4D t)
{
	return Triangle4D {
		.v1.pos = t.v1.pos,
		.v2.pos = t.v2.pos,
		.v3.pos = t.v3.pos,
		.v1.normal = t.v1.normal,
		.v2.normal = t.v2.normal,
		.v3.normal = t.v3.normal,
	};
}

bool otherOtherOtherTest()
{
	Triangle4D t = Triangle4D {
		.v1 = Vertex4D {
			.pos.x = 1,
			.pos.y = 2,
			.pos.z = 3,
			.pos.w = 4,
			.normal.x = 5,
			.normal.y = 6,
			.normal.z = 7,
		},
		.v2 = Vertex4D {
			.pos.x = 8,
			.pos.y = 9,
			.pos.z = 10,
			.pos.w = 11,
			.normal.x = 12,
			.normal.y = 13,
			.normal.z = 14,
		},
		.v3 = Vertex4D {
			.pos.x = 15,
			.pos.y = 16,
			.pos.z = 17,
			.pos.w = 18,
			.normal.x = 19,
			.normal.y = 20,
			.normal.z = 21,
		},
	};

	if (t.v1.pos.x    != 1  ||
		t.v1.pos.y    != 2  ||
		t.v1.pos.z    != 3  ||
		t.v1.pos.w    != 4  ||
		t.v1.normal.x != 5  ||
		t.v1.normal.y != 6  ||
		t.v1.normal.z != 7  ||
		t.v2.pos.x    != 8  ||
		t.v2.pos.y    != 9  ||
		t.v2.pos.z    != 10 ||
		t.v2.pos.w    != 11 ||
		t.v2.normal.x != 12 ||
		t.v2.normal.y != 13 ||
		t.v2.normal.z != 14 ||
		t.v3.pos.x    != 15 ||
		t.v3.pos.y    != 16 ||
		t.v3.pos.z    != 17 ||
		t.v3.pos.w    != 18 ||
		t.v3.normal.x != 19 ||
		t.v3.normal.y != 20 ||
		t.v3.normal.z != 21)
		return false;

	t = TransformTriangle(t);

	if (t.v1.pos.x    != 1  ||
		t.v1.pos.y    != 2  ||
		t.v1.pos.z    != 3  ||
		t.v1.pos.w    != 4  ||
		t.v1.normal.x != 5  ||
		t.v1.normal.y != 6  ||
		t.v1.normal.z != 7  ||
		t.v2.pos.x    != 8  ||
		t.v2.pos.y    != 9  ||
		t.v2.pos.z    != 10 ||
		t.v2.pos.w    != 11 ||
		t.v2.normal.x != 12 ||
		t.v2.normal.y != 13 ||
		t.v2.normal.z != 14 ||
		t.v3.pos.x    != 15 ||
		t.v3.pos.y    != 16 ||
		t.v3.pos.z    != 17 ||
		t.v3.pos.w    != 18 ||
		t.v3.normal.x != 19 ||
		t.v3.normal.y != 20 ||
		t.v3.normal.z != 21)
		return false;

	return true;
}

external any AAA_test_accessing_from_expressions;
@init { AAA_test_accessing_from_expressions = test() && otherTest() && otherOtherTest() && otherOtherOtherTest(); }
