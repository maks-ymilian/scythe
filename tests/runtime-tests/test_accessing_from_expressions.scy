struct Level3
{
	int w;
}

struct Level2
{
	string z;
	Level3 deep;
}

struct Level1
{
	string x;
	int y;
	Level2 deep;
}

bool test()
{
	Level1 t1;
	Level1 t2 = Level1{.deep.deep.w = 78};

	if ((t1 = t2).deep.deep.w != 78 ||
		t1.deep.deep.w != 78 ||
		t2.deep.deep.w != 78)
		return false;

	Level1[] arr1 = Level1[]{.ptr = 100};
	Level1[] arr2 = Level1[]{.ptr = 150};
	(*(arr1.ptr)) = Level1{.deep.deep.w = 29};
	(*(arr2.ptr)) = Level1{.deep.deep.w = 31};

	if ((*(arr2.ptr)).deep.deep.w != 31 ||
		(*(arr1.ptr)).deep.deep.w != 29 ||
		((*(arr1.ptr)).deep = (*(arr2.ptr)).deep).deep.w != 31 ||
		(*(arr1.ptr)).deep.deep.w != 31)
		return false;

	if (Level1{.y = 5}.y + Level2{.deep.w = 89}.deep.w != 5 + 89 ||
		(Level1[]{.ptr = 1000}[0].deep.deep.w = 51) != 51 ||
		int[]{.ptr = 1000}[3] != 51)
		return false;

	Level1[] arr3 = Level1[]{.ptr = 20, .length = 48};
	Level1[] arr4 = Level1[]{.ptr = 30, .length = 27};
	arr3[0] = Level1{.deep.deep.w = 209};
	arr4[0] = Level1{.deep.deep.w = 938};

	if (arr3[0].deep.deep.w != 209 ||
		arr4[0].deep.deep.w != 938 ||
		(arr3 = arr4)[0].deep.deep.w != 938 ||
		arr3[0].deep.deep.w != 938 ||
		arr4[0].deep.deep.w != 938)
		return false;

	if (arr3.ptr != 30 ||
		arr3.length != 27)
		return false;

	return true;
}

external bool AAA_test_accessing_from_expressions;
@init { AAA_test_accessing_from_expressions = test(); }
