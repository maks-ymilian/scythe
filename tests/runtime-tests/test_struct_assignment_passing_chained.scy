struct Level3
{
	int w;
}

struct Level2
{
	string z;
	Level3 deep;
}

struct Level1
{
	string x;
	int y;
	Level2 deep;
}

Level1 Level1_passthrough(Level1 value)
{
	return value;
}

Level1 doShit(int param1, Level1 value, string z, int w)
{
	return Level1 {
		.x = value.deep.z,
		.y = value.y + value.deep.deep.w,
		.deep.z = z,
		.deep.deep.w = w,
	};
}

bool test_equality(Level1 value1, Level1 value2)
{
	return
		value1.x == value2.x &&
		value1.y == value2.y &&
		value1.deep.z == value2.deep.z &&
		value1.deep.deep.w == value2.deep.deep.w;
}

struct TestValues
{
	int num1;
	int num2;
	int num3;
	string str1;
	string str2;
}

bool test()
{
	TestValues testValues = TestValues {
		.num1 = 19,
		.num2 = 48,
		.num3 = 54,
		.str1 = "yeahe",
		.str2 = "other",
	};

	Level1 value = Level1 {
		.y = testValues.num1,
		.deep = Level2 {
			.z = testValues.str1,
			.deep = Level3 {
				.w = testValues.num2,
			},
		},
	};

	Level1 value1 = Level1 {
		.x = "irrelevant",
		.y = -1,
		.deep.z = "irrelevant1",
		.deep.deep.w = -1,
	};

	Level1 value2;
	Level1 value3;
	Level1 value4;
	Level1 value5;
	Level1 value6;
	Level1 value7;
	Level1 value8;
	Level1 value9;

	if (!test_equality(value2, value3) ||
		!test_equality(value3, value4) ||
		!test_equality(value4, value5) ||
		!test_equality(value5, value6) ||
		!test_equality(value6, value7) ||
		!test_equality(value7, value8) ||
		!test_equality(value8, value9) ||
		test_equality(value9, value1))
		return false;

	value2 = value3 = value4 = value5 = value6 = value7 = value8 = value9 = value1;

	if (!test_equality(value2, value3) ||
		!test_equality(value3, value4) ||
		!test_equality(value4, value5) ||
		!test_equality(value5, value6) ||
		!test_equality(value6, value7) ||
		!test_equality(value7, value8) ||
		!test_equality(value8, value9) ||
		!test_equality(value9, value1))
		return false;

	Level1 ret = value8 = value9 = Level1 {
		return value7 = Level1_passthrough(
			value5 = value6 = doShit(
				1,
				value4 = Level1_passthrough(value3 = value2 = value1 = value),
				testValues.str2,
				testValues.num3));
	};

	bool test_the_values(Level1 value, TestValues testValues)
	{
		return
			value.y == testValues.num1 + testValues.num2 &&
			value.x == testValues.str1 &&
			value.deep.z == testValues.str2 &&
			value.deep.deep.w == testValues.num3;
	}

	return
		test_the_values(ret, testValues) &&
		test_equality(value, value1) &&
		test_equality(value, value2) &&
		test_equality(value, value3) &&
		test_equality(value, value4) &&
		test_equality(ret, value5) &&
		test_equality(ret, value6) &&
		test_equality(ret, value7) &&
		test_equality(ret, value8) &&
		test_equality(ret, value9);
}

external bool AAA_test_struct_assignment_passing_chained;
@init { AAA_test_struct_assignment_passing_chained = test(); }
