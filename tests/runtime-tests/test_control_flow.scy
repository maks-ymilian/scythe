int funcTest(int k, int f)
{
	if (k == 1)
		return 5;
	else
	{
		if (k == 3 && f == 5)
		return 6;
	}

	int a = 1;

	while (false)
		return 3;

	while (true)
		return 2;

	return 3;
	int p;
	p = 1;
}

int test_loops(int value)
{
	int result = value;
	int outer_counter = 0;

	while (outer_counter < value)
	{
		int middle_counter = 0;

		while (middle_counter < (value * 2))
		{
			int inner_counter = 0;

			while (inner_counter < (value * 3))
			{
				result += (outer_counter * middle_counter) - int{inner_counter / 2};

				if (result > 10000)
				{
					result = 10000;
					break;
				}

				if (inner_counter + 5532 < 0)
				{
					inner_counter += 1;
					continue;
				}

				inner_counter += 1;
			}

			if (middle_counter > (value * 2) / 2)
				break;

			middle_counter += 1;
		}

		if (result < 0)
			return result;

		outer_counter += 1;
	}

	return result;
}

bool test_continue_index()
{
	{
		int i = 0;
		for (; i < 10; ++i)
		{
			if (i == 5)
				continue;

			stack.push(0);
		}
		if (i != 10)
			return false;
	}
	{
		int i = 0;
		for (; i < 10; ++i)
		{
			if (i == 5)
				break;

			stack.push(0);
		}
		if (i != 5)
			return false;
	}

	return true;
}

external any AAA_test_control_flow;

@init
{
	AAA_test_control_flow = test_continue_index() && int {
		int sum = 0;
		for (int i = 0; i <= 50; i += 1)
			sum += test_loops(i);
		return sum;
	} == -3781499 &&
		funcTest(3, 5.2) == 6 &&
		funcTest(1, 5.2) == 5 &&
		funcTest(3, 6) == 2;
}
